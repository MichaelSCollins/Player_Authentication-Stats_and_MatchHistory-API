version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: go-game-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: go-game-db
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - go-game-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:latest
    container_name: go-game-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password123
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - go-game-network

  # Go Game API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: go-game-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/go-game-db?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      CORS_ORIGIN: http://localhost:3000,http://localhost:8080,http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - go-game-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: [ "CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for session management (Optional - for scaling)
  redis:
    image: redis:7-alpine
    container_name: go-game-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - go-game-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  go-game-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
